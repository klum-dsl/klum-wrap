/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015-2017 Stephan Pauxberger
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.blackbuild.klum.wrap

import com.intellij.psi.PsiAnnotation
import com.intellij.psi.PsiAnnotationMemberValue
import com.intellij.psi.PsiExpression
import com.intellij.psi.PsiType

contributor(ctype:hasAnnotation("com.blackbuild.klum.wrap.Wrap")) {

    PsiAnnotation wrap = psiClass.getAnnotation("com.blackbuild.klum.wrap.Wrap")

    PsiAnnotationMemberValue value = wrap.findDeclaredAttributeValue("value")

    if (!value instanceof PsiExpression) return

    PsiType delegateType = (value as PsiExpression).type.parameters[0]

    if (!delegateType) return

    method(constructor: true, params: ["delegate": delegateType.canonicalText])

    property(name: "delegate", type: delegateType.canonicalText, doc: "the wrapped object")

    // TODO: Explicitly delegate
    delegatesTo(findClass(delegateType.canonicalText))
}
